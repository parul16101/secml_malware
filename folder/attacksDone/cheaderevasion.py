import os
import sys
from secml.array import CArray
from secml_malware.models.malconv import MalConv
from secml_malware.models.c_classifier_end2end_malware import CClassifierEnd2EndMalware, End2EndModel
from secml_malware.attack.whitebox.c_header_evasion import CHeaderEvasion

class CHeaderEvasionAdapter:
    def __init__(self):
        self.net = MalConv()
        self.net = CClassifierEnd2EndMalware(self.net)
        self.net.load_pretrained_model()
        self.partial_dos = CHeaderEvasion(self.net, random_init=False, iterations=50, optimize_all_dos=False, threshold=0.5)

    def generate_attack(self, folder):
        X = []
        y = []
        file_names = []
        for i, f in enumerate(os.listdir(folder)):
            path = os.path.join(folder, f)
            with open(path, "rb") as file_handle:
                code = file_handle.read()
            x = End2EndModel.bytes_to_numpy(code, self.net.get_input_max_length(), 256, False)
            _, confidence = self.net.predict(CArray(x), True)

            X.append(x)
            conf = confidence[1][0].item()
            y.append([1 - conf, conf])
            file_names.append(path)

        for sample, label in zip(X, y):
            y_pred, adv_score, adv_ds, f_obj = self.partial_dos.run(CArray(sample), CArray(label[1]))
            print(self.partial_dos.confidences_)
            print(f_obj)

        adv_x = adv_ds.X[0, :]
        real_adv_x = self.partial_dos.create_real_sample_from_adv(file_names[0], adv_x)
        print(len(real_adv_x))
        real_x = End2EndModel.bytes_to_numpy(real_adv_x, self.net.get_input_max_length(), 256, False)
        _, confidence = self.net.predict(CArray(real_x), True)
        print(confidence[0, 1].item())

        output_file_path = "output/output_{71257279-042b-371d-a1d3-fbf8d2fadffa}.exe"  # Replace with the desired output file path
        with open(output_file_path, "wb") as file_handle:
            file_handle.write(real_adv_x)

        print("Modified file saved successfully.")

CHEvd = CHeaderEvasionAdapter()
CHEvd.generate_attack(sys.argv[1])

# python3 cheaderevasion.py "secml_malware/data/malware_samples/test_folder/data"
